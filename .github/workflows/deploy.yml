name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
  # pull_request:
  #   branches:
  #     - main  # Trigger the workflow on pull requests to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Build Docker Image (optional, if deploying to ECS)
      - name: Build Docker Image
        run: |
          docker build --no-cache -t cold-email-generator .

      # Debugging: Print masked secrets
      - name: Debug Secrets
        run: |
          echo "Docker Username is set"
          echo "Docker Token Length: ${#DOCKER_HUB_TOKEN}"
        env:
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}



      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      
      # Step 6: Push Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker tag cold-email-generator ${{ secrets.DOCKER_USERNAME }}/cold-email-generator:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/cold-email-generator:latest
      
        # Step 7: Deploy to AWS EC2 (Using Native SSH)
      - name: Deploy to EC2
        run: |
          echo "Deploying application..."
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key

          ssh -o StrictHostKeyChecking=no -i ~/.ssh/private_key ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" > .env
            set -e  # Stop script on first error
            echo "Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/cold-email-generator:latest
            echo "Stopping existing container..."
            docker stop cold-email-generator-container || true
            echo "Removing existing container..."
            docker rm cold-email-generator-container || true
            echo "Starting new container..."
            docker run -d -p 8501:8501 --name cold-email-generator-container ${{ secrets.DOCKER_USERNAME }}/cold-email-generator:latest
            echo "Deployment complete!"
          EOF

          rm -f ~/.ssh/private_key  # Cleanup the private key after use
